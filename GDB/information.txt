1) to use gdb we need to compile cpp files with "-g" flag.
gdb <executableName>
r or run => run the program
bt or backtrace => backtrace if there is any crash
break filename.cpp:<lineNumber> => setup a breakpoint in file
info breakpoints => information of breakpoints

If there is a crash file generated by executable then we use gdb command as =
gdb <executable> <crashfile>

r => rerun program after setting breakpoints, it will stop at breakpoint
list => shows code surrounding the current context
continue => to continue with futher execution

frame <frameNumber> => to select a particular frame in backtrace
print(someVarName) => to get the value of the variable

quit => to exit gdb

2) How to execute some code when the execution stops at particular breakpoint =
break filename.cpp:<lineNumber> => now code execution will stop at that line 
commands => this will open a cmd to give commands and type "end" when done
print <varName>
print <varName>
done

Now with this, whenever this breakpoint hits it will execute the commands

continue => to continue the execution further.

info breakpoints => shows the list of breakpoints and also the commands associated with those breakpoints.

3) How to set conditional breakpoint and change variables =
Lets say we have this cpp code,
    int num1 = 3;
    int num2 = 0;
    int num3 = num1/num2;

we want to set conditional breakpoint at num3 line if num2 is zero and change num2 value to 1.

break <lineNumber> if num2==0
commands
set num2=1
print("changed num2 from 0 to 1")
continue
end

4) watchpoints =
we can use watchpoint to stop execution whenever the value of an expression changes, without having to predict a particular place where this may happen. this is also called as "data breakpoint". The expression can be a single variable or as complex as many combined by operators.

Lets say we have an array "p" and we want to break the flow whenever the data at index 3 in array p changes. =
watch p[3]
info watchpoints => gives info of all watchpoints
continue 

whenever the value at index 3 of array p changes we pause at that line in program and it shows "Old value" and "New Value"

5) How to delete breakpoints =
info breakpoints => check index of breakpoint we want to delete
del <index>

OR

del <start_breakpoint_num> - <end_breakpoint_num>

d => to delete all the breakpoints

6) GDB Text user interface

shows text area where we see the code flow step by step.
tui enable => command to show text interface
OR
ctrl+x+1

r =>  run the program to see the source cpp file in text area.
we can use "step" or "next" command to execute the code step by step.

we can also add layouts =

layout asm => shows assmebly code

https://medium.com/@miku.bhushan/the-lesser-known-text-user-interface-of-gdb-1-eb4d3b1a49a2

References =>
1) https://youtu.be/o1JinIcoz24?si=C14HiSgTOR9dmi_x
2) https://youtu.be/--n7afYzN0M?si=FWh1WMfiGjVeFhbz
3) https://youtu.be/07HMZZgG45A?si=-zCaoLzwKQxcgVid
