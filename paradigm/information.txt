1) Clean code =
Meaningful names
Functions
Comments
Formatting
Objects and Data structures
Bounderies
Unit Tests
Classes

MF CF OBUC 
2) Agile Software Development = 
https://www.simplilearn.com/tutorials/agile-scrum-tutorial/what-is-agile
https://www.geeksforgeeks.org/software-engineering-agile-software-development/

Software Development Lifecycle (SDLC) = 
https://www.geeksforgeeks.org/software-development-life-cycle-sdlc/

3) SOLID Principles =
https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898
https://freecodecamp.org/news/solid-principles-explained-in-plain-english/

4) Model View controller =
https://www.geeksforgeeks.org/mvc-framework-introduction/
https://developer.mozilla.org/en-US/docs/Glossary/MVC
https://jacobgalam.medium.com/mvc-in-c-66497e5d7011

5) UML Diagrams (class diagram) =
https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/
https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b
https://www.youtube.com/watch?v=6XrL5jXmTwM

need some help with association and dependency.

Association = class Otter animal eats class seaurchins
Inheritance = class Dog inherits from class animal
Realisation = class Dog is implementing a abstract class Animal or interface Animal
Dependency = class Person has a method readBook(Book b) which needs object of class Book so class Person is dependent on class Book
Aggregation = class Team has object of class Employee, Employee can exist without a Team
Composition = class Body has object of class Heart, Heart cannot exist without a Body

6) Object Oriented Programming = 
https://www.programiz.com/cpp-programming/oop

7) All short forms =
DRY = Don't Repeat Yourself
KISS = Keep It Simple Stupid
TDD = Test Driven Development
BDUF = Big design up front (BDUF) is a software development approach in which the program's design is to be completed and perfected before that program's implementation is started. It is often associated with the waterfall model of software development.
SOC = Separation of Concerns (SoC) is a fundamental principle in software engineering and design aimed at breaking down complex systems into smaller, more manageable parts. The goal is to organize a systemâ€™s components in a way that each part addresses a single concern, or a cohesive aspect of functionality, rather than mixing multiple concerns together. This approach enhances modularity, maintainability, and scalability of software systems.
YAGNI = YAGNI principle ("You Aren't Gonna Need It") is a practice in software development which states that features should only be added when required.