1) https://domiyanyue.medium.com/c-development-tutorial-4-static-and-dynamic-libraries-7b537656163e#:~:text=A%20static%20library%20(or%20archive,loaded%20to%20memory%20at%20runtime.
https://www.linkedin.com/pulse/shared-dynamic-libraries-c-santosh-s-malagi/

2) when we use "g++" command to compile the cpp file then it automaticaly links the file with libstdc++.so file.
main.cpp contains simple hello cout statement.
g++ main.cpp -o main_dynamic => this creates a main_dymanic executable
g++ main.cpp -o main_static -static-libstdc++ => this creates executable main_static with libstdc++ library linked statically.

how to check it ?-> using "ldd" command in linux
ldd main_dynamic => shows libstdc++.so linked to it dynamincally 
ldd main_static => does not show libstdc++.so linked

compare the sizes => main_static has much higher sixe than main_dynamic

how to read object files ie disassemble object files =>
objdump -dC main_dynamic > out_dynamic.s 
objdump -dC main_static > out_statics.s

read both out_dynamic.s and out_static.s and try to find "<main>" function, inside it try to find "cout" inside that funcion.
Try to track the address mentioned in cout function you would see that in static disassembled code the address points to the cout function directly whereas in dynamic code it points to some jump statement.(procedure linkage table)


3) How to create static and dynamic/shared library =>

We have these files = main.cpp, add.cpp, add.h, multiply.cpp, multiply.h

We can compile main.cpp normally with by treating add.cpp and multiply.cpp as normal source file =
g++ -c add.cpp -o add.o
g++ -c multiply.cpp -o multiply.o
g++ -c main.cpp -o main.o
g++ add.o multiply.o main.o -o normal.out
./normal.out

If we create static library from add.cpp and multiply.cpp =
g++ -c add.cpp -o add.o
g++ -c multiply.cpp -o multiply.o
ar -crs libtest.a multiply.o add.o => so we call libtest.a a archive file. Archive file is just collection of object files
ar -t libtest.a => this step is just for information of which object files are contained by archive file
g++ main.cpp -o main_static -ltest -L./  => "-l" option specifies name of library and "-L" option specifies path where we can find that library
./main_static

meaning of "crs" flags in ar command =>
-c: Ensures that libtest.a is created if it does not already exist.
-r: Replaces or adds add.o and multiply.o in the archive.
-s: Creates an index for the archive to help with symbol lookup during linking.
-t: Lists the files in the archive without extracting them.

If we create dynamic/shared library from add.cpp and multiply.cpp =
g++ -c add.cpp multiply.cpp -fPIC => -fPIC flag is used to tell compiler to generate position independent code. which is required becasue in case of dynamic library the code will be loaded in memory at runtime and code (functions inside it) will not have fixed address so that's why we need position independent code for dynamic library.
this command generates add.o and multiply.o
g++ -shared add.o multiply.o -o libtest2.so
g++ main.cpp -o main_dynamic -ltest2 -L./
ldd main_dynamic => this command will show "libtest2.so => not found". Although we provided library path during compilation of main but compiler does not embed it in executable. so before running main_dynamic executable we need to specify where to find shared library otherwise it will throw this error = "error while loading shared libraries: libtest2.so: cannot open shared object file"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/maint/code/shared_lib/test2 => specify location of libtest2.so
ldd main_dynamic => now it will show some address of libtest2.so
./main_dynamic

file size comparison =
17416 normal.out

17416 main_static
3000 libtest.a

15720 libtest2.so
17344 main_dynamic

dynamic/shared library has lower file size as compared to static library.

-----------------------
References =
1) https://youtu.be/yxZqhAfdODI?si=gPq1e2pCUpGv8DH4
2) https://youtu.be/JMFqPsnonq0?si=UK-PmS1EhlAkG3me
3) https://youtu.be/DQJZGMChIog?si=W6zhpyvXJkA-2Prb

----------------------------

to read symbols from so file => nm -gDC libmymath.so
https://stackoverflow.com/questions/34732/how-do-i-list-the-symbols-in-a-so-file

In gdb do this if we have shared library in main executable =>
gdb ./main
set environment LD_LIBRARY_PATH .
r
bt


----------------------File Extensions =
Shared Library File Extensions:
Windows: .dll
Mac OS X: .dylib
Linux: .so

Static Library File Extensions:
Windows: .lib
Mac OS X: .a
Linux: .a